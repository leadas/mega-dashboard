name: Backup Encrypted Dashboard Data
on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Manual trigger button

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Create backup directory
        run: |
          BACKUP_DIR="backups/$(date +%Y-%m-%d_%H-%M-%S)"
          mkdir -p "$BACKUP_DIR"
          echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
      
      - name: Check server status and backup data
        run: |
          echo "🔍 Checking server status and backup information..."
          
          # Get your Railway app URL
          RAILWAY_URL="${{ secrets.RAILWAY_APP_URL }}"
          
          if [ -z "$RAILWAY_URL" ]; then
            echo "❌ RAILWAY_APP_URL secret not set"
            echo "Please set RAILWAY_APP_URL secret in GitHub repository settings"
            exit 1
          fi
          
          echo "🌐 Railway URL: $RAILWAY_URL"
          
          # Check if server is running
          if curl -s -f "$RAILWAY_URL/health" > /dev/null; then
            echo "✅ Server is running and accessible"
            
            # Get backup information from server API
            echo "📊 Getting backup information from server..."
            if curl -s -f "$RAILWAY_URL/api/backup-info" > backup_info.json; then
              echo "✅ Backup info received:"
              cat backup_info.json
              
              # Parse backup info
              HAS_DATA=$(cat backup_info.json | jq -r '.has_data // false')
              FILES_COUNT=$(cat backup_info.json | jq -r '.files_count // 0')
              FILES_LIST=$(cat backup_info.json | jq -r '.files[]?.filename // empty' 2>/dev/null)
              
              echo "📁 Has data: $HAS_DATA"
              echo "📄 Files count: $FILES_COUNT"
              echo "📋 Raw FILES_LIST: '$FILES_LIST'"
              echo "📋 FILES_LIST length: ${#FILES_LIST}"
              
              if [ "$HAS_DATA" = "true" ] && [ "$FILES_COUNT" -gt 0 ]; then
                echo "🎯 Encrypted files found on server - creating backup manifest and downloading files"
                
                # Create backup manifest with file information
                cat > "$BACKUP_DIR/backup_manifest.json" << EOF
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "encrypted_files_found",
            "files_count": $FILES_COUNT,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "railway_url": "$RAILWAY_URL",
            "message": "Encrypted files detected - backup verification successful",
            "files": [
              $(echo "$FILES_LIST" | sed 's/^/              "/' | sed 's/$/"/' | paste -sd, -)
            ],
            "backup_method": "server_api_verification"
          }
          EOF
                
                echo "✅ Backup manifest created successfully"

                # Download encrypted files directly using known filename
                echo "🔄 Attempting direct file download..."
                
                # Extract filename from backup info JSON
                FILENAME=$(cat backup_info.json | jq -r '.files[0].filename // empty')
                echo "📋 Extracted filename: '$FILENAME'"
                
                if [ -n "$FILENAME" ] && [ "$FILENAME" != "null" ] && [ "$FILENAME" != "empty" ]; then
                  echo "⬇️  Downloading file: $FILENAME"
                  echo "Download URL: $RAILWAY_URL/api/download-file/$FILENAME"
                  echo "Target path: $BACKUP_DIR/$FILENAME"
                  
                  # Create the target file path
                  mkdir -p "$BACKUP_DIR"
                  
                  # Download with verbose output
                  echo "🔍 Starting curl download..."
                  curl -v -L "$RAILWAY_URL/api/download-file/$FILENAME" -o "$BACKUP_DIR/$FILENAME" 2>&1 | head -20
                  
                  # Check if file was created
                  if [ -f "$BACKUP_DIR/$FILENAME" ]; then
                    FILESIZE=$(wc -c < "$BACKUP_DIR/$FILENAME")
                    echo "✅ File downloaded successfully: $BACKUP_DIR/$FILENAME ($FILESIZE bytes)"
                  else
                    echo "❌ File download failed - file not found: $BACKUP_DIR/$FILENAME"
                    
                    # Try alternative download method
                    echo "🔄 Trying alternative download method..."
                    wget -O "$BACKUP_DIR/$FILENAME" "$RAILWAY_URL/api/download-file/$FILENAME" 2>&1 | head -10
                    
                    if [ -f "$BACKUP_DIR/$FILENAME" ]; then
                      FILESIZE=$(wc -c < "$BACKUP_DIR/$FILENAME")
                      echo "✅ Alternative download successful: $BACKUP_DIR/$FILENAME ($FILESIZE bytes)"
                    else
                      echo "❌ Alternative download also failed"
                    fi
                  fi
                else
                  echo "❌ No valid filename found in backup info"
                fi
                
                # Show final backup directory contents
                echo "📁 Final backup directory contents:"
                ls -la "$BACKUP_DIR"
              else
                echo "📝 No encrypted files found on server"
                
                # Create backup manifest for empty state
                cat > "$BACKUP_DIR/backup_manifest.json" << EOF
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "no_encrypted_files",
            "files_count": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "railway_url": "$RAILWAY_URL",
            "message": "No encrypted files found - dashboard may be empty",
            "backup_method": "server_api_verification"
          }
          EOF
                
                echo "✅ Empty backup manifest created"
              fi
            else
              echo "❌ Could not get backup info from server API"
              
              # Create backup manifest for API failure
              cat > "$BACKUP_DIR/backup_manifest.json" << EOF
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "backup_api_failed",
            "files_count": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "railway_url": "$RAILWAY_URL",
            "message": "Backup info API endpoint failed - server may have issues",
            "backup_method": "server_api_verification"
          }
          EOF
            fi
          else
            echo "❌ Server is not accessible or not running"
            
            # Create backup manifest for server down
            cat > "$BACKUP_DIR/backup_manifest.json" << EOF
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "server_not_accessible",
            "files_count": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "railway_url": "$RAILWAY_URL",
            "message": "Server is not accessible - may be down or URL incorrect",
            "backup_method": "server_api_verification"
          }
          EOF
          fi
      
      - name: Verify backup integrity
        run: |
          echo "🔍 Backup verification:"
          echo "📁 Backup directory: $BACKUP_DIR"
          echo "📄 Backup manifest:"
          cat "$BACKUP_DIR/backup_manifest.json"
          
          # Always create a backup entry, even if empty
          echo "✅ Backup process completed successfully"
      
      - name: Commit and push backup to 'backups' branch only
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Debug: Show current state
          echo "🔍 Debug information:"
          echo "BACKUP_DIR: $BACKUP_DIR"
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of BACKUP_DIR:"
          ls -la "$BACKUP_DIR" || echo "BACKUP_DIR not found"

          # Prepare a separate worktree for backups branch
          mkdir -p ../backups-worktree
          rm -rf ../backups-worktree
          
          # Try to fetch the backups branch
          git fetch origin backups:refs/remotes/origin/backups 2>/dev/null || echo "No remote backups branch yet"
          
          # Create worktree for backups branch
          if git show-ref --verify --quiet refs/remotes/origin/backups; then
            echo "Creating worktree from existing remote backups branch"
            git worktree add ../backups-worktree -B backups origin/backups
          else
            echo "Creating new backups branch"
            git worktree add ../backups-worktree -b backups
          fi

          # Copy current backup directory into worktree
          echo "Copying backup directory: $BACKUP_DIR to worktree"
          echo "Contents of source backup directory:"
          ls -la "$BACKUP_DIR"
          rsync -a "$BACKUP_DIR" ../backups-worktree/
          echo "Contents after copy:"
          ls -la ../backups-worktree/

          # Commit inside backups worktree
          pushd ../backups-worktree
          echo "Inside worktree, contents:"
          ls -la
          echo "Looking for backup manifest:"
          find . -name "backup_manifest.json" -type f
          
          git add .
          
          # Find the backup manifest file
          MANIFEST_FILE=$(find . -name "backup_manifest.json" -type f | head -1)
          if [ -n "$MANIFEST_FILE" ] && [ -f "$MANIFEST_FILE" ]; then
            echo "Found manifest file: $MANIFEST_FILE"
            BACKUP_DATE=$(date '+%Y-%m-%d %H:%M')
            BACKUP_TYPE=$(cat "$MANIFEST_FILE" | jq -r '.backup_type // "unknown"')
            FILES_COUNT=$(cat "$MANIFEST_FILE" | jq -r '.files_count // 0')
            echo "Backup info - Type: $BACKUP_TYPE, Files: $FILES_COUNT"
            git commit -m "🔒 [BACKUP-$BACKUP_TYPE] $BACKUP_DATE (files: $FILES_COUNT)" || true
          else
            echo "No manifest file found, creating generic commit"
            git commit -m "🔒 [BACKUP-unknown] $(date '+%Y-%m-%d %H:%M') (no manifest)" || true
          fi
          
          git push origin backups
          popd
      
      - name: Cleanup old backups in 'backups' branch
        run: |
          # Prune old backups within backups branch worktree
          if [ -d "../backups-worktree" ]; then
            pushd ../backups-worktree || exit 0
            echo "🧹 Cleaning up old backups..."
            echo "Current worktree contents:"
            ls -la
            find . -maxdepth 1 -type d -name "20*" -mtime +30 -exec rm -rf {} + 2>/dev/null || true
            git add .
            if ! git diff --staged --quiet; then
              git commit -m "🧹 Cleanup old backups (keep last 30 days)" || true
              git push origin backups
            fi
            popd || true
          else
            echo "No worktree found for cleanup"
          fi
      
      - name: Backup summary
        if: always()
        run: |
          echo "=== 📊 Backup Summary ==="
          echo "Status: ${{ job.status }}"
          echo "Backup directory: $BACKUP_DIR"
          echo "Backup size: $(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "Repository size: $(du -sh . | cut -f1)"
          echo "========================="
