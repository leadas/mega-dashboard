name: Backup Encrypted Dashboard Data
on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Manual trigger button

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Railway CLI
        run: npm install -g @railway/cli
      
      - name: Create backup directory
        run: |
          BACKUP_DIR="backups/$(date +%Y-%m-%d_%H-%M-%S)"
          mkdir -p "$BACKUP_DIR"
          echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
      
      - name: Connect to Railway service (without deployment)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "Connecting to Railway service for data access..."
          # Link to the project without triggering deployment
          railway link --project ${{ secrets.RAILWAY_PROJECT_ID }}
      
      - name: Access service files via SSH (alternative approach)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "Attempting to access service files..."
          
          # Try to get service logs to check if service is running
          railway logs --service web --tail 1 || echo "Service may not be running"
          
          # Alternative: Use railway shell for file access (if available)
          # This should not trigger deployment
          if railway shell --service web --command "test -d secure_data" 2>/dev/null; then
            echo "secure_data directory found via shell access"
            
            # List files in secure_data
            railway shell --service web --command "find secure_data -name '*.enc' -type f" > encrypted_files.txt || true
            
            if [ -s encrypted_files.txt ]; then
              echo "Found encrypted files, downloading via shell..."
              
              # Download each file via shell
              while IFS= read -r file_path; do
                if [ -n "$file_path" ]; then
                  filename=$(basename "$file_path")
                  echo "Downloading: $filename"
                  railway shell --service web --command "cat $file_path" > "$BACKUP_DIR/$filename" || echo "Failed to download $filename"
                fi
              done < encrypted_files.txt
            else
              echo "No encrypted files found"
              # Create empty backup manifest
              cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "no_encrypted_files_found",
            "files_count": 0,
            "total_size_bytes": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "No encrypted files found - dashboard may be empty"
          }
          EOF
            fi
          else
            echo "Could not access secure_data directory"
            # Create backup manifest indicating access issue
            cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "access_failed",
            "files_count": 0,
            "total_size_bytes": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Could not access secure_data directory - may need different approach"
          }
          EOF
          fi
      
      - name: Verify backup integrity
        run: |
          echo "Backup verification:"
          echo "Files downloaded: $(ls -1 "$BACKUP_DIR"/*.enc 2>/dev/null | wc -l)"
          echo "Total size: $(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1)"
          echo "Backup directory: $BACKUP_DIR"
          
          # Always create a backup entry, even if empty
          echo "Backup process completed successfully"
      
      - name: Commit and push backup
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add backups/
          
          # Create commit message
          BACKUP_DATE=$(date '+%Y-%m-%d %H:%M')
          FILES_COUNT=$(ls -1 "$BACKUP_DIR"/*.enc 2>/dev/null | wc -l)
          if [ $FILES_COUNT -eq 0 ]; then
            git commit -m "Backup check: $BACKUP_DATE (no encrypted files found)" || exit 0
          else
            git commit -m "Backup encrypted data: $BACKUP_DATE ($FILES_COUNT files)" || exit 0
          fi
          git push
      
      - name: Cleanup old backups
        run: |
          # Keep only last 30 days of backups (delete directories older than 30 days)
          echo "Cleaning up old backups..."
          find backups/ -type d -name "20*" -mtime +30 -exec rm -rf {} + 2>/dev/null || true
          
          # Commit cleanup if any files were removed
          git add backups/
          if ! git diff --staged --quiet; then
            git commit -m "Cleanup old backups (keep last 30 days)" || exit 0
            git push
          fi
      
      - name: Backup summary
        if: always()
        run: |
          echo "=== Backup Summary ==="
          echo "Status: ${{ job.status }}"
          echo "Backup directory: $BACKUP_DIR"
          echo "Files backed up: $(ls -1 "$BACKUP_DIR"/*.enc 2>/dev/null | wc -l)"
          echo "Backup size: $(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "Repository size: $(du -sh . | cut -f1)"
          echo "====================="
