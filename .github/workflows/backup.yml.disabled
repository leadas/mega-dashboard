# DISABLED - This workflow was causing Railway deployments and data loss
# DO NOT ENABLE until Railway deployment settings are fixed

name: Backup Encrypted Dashboard Data
on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Manual trigger button

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create backup directory
        run: |
          BACKUP_DIR="backups/$(date +%Y-%m-%d_%H-%M-%S)"
          mkdir -p "$BACKUP_DIR"
          echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
      
      - name: Check server status and get backup info
        run: |
          echo "Checking server status and backup information..."
          
          # Get your Railway app URL
          RAILWAY_URL="${{ secrets.RAILWAY_APP_URL }}"
          
          if [ -z "$RAILWAY_URL" ]; then
            echo "RAILWAY_APP_URL secret not set"
            RAILWAY_URL="https://your-app-name.railway.app"
          fi
          
          echo "Railway URL: $RAILWAY_URL"
          
          # Check if server is running
          if curl -s -f "$RAILWAY_URL/health" > /dev/null; then
            echo "Server is running and accessible"
            
            # Get backup information
            echo "Getting backup information..."
            curl -s "$RAILWAY_URL/api/backup-info" > backup_info.json || echo "Could not get backup info"
            
            if [ -f backup_info.json ]; then
              echo "Backup info received:"
              cat backup_info.json
              
              # Parse backup info
              HAS_DATA=$(cat backup_info.json | grep -o '"has_data":[^,]*' | cut -d: -f2 | tr -d ' ')
              FILES_COUNT=$(cat backup_info.json | grep -o '"files_count":[^,]*' | cut -d: -f2 | tr -d ' ')
              
              echo "Has data: $HAS_DATA"
              echo "Files count: $FILES_COUNT"
              
              if [ "$HAS_DATA" = "true" ] && [ "$FILES_COUNT" -gt 0 ]; then
                echo "Encrypted files found on server"
                cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "encrypted_files_found",
            "files_count": "$FILES_COUNT",
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Encrypted files detected - backup verification successful"
          }
          EOF
              else
                echo "No encrypted files found on server"
                cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "no_encrypted_files",
            "files_count": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "No encrypted files found - dashboard may be empty"
          }
          EOF
              fi
            else
              echo "Could not get backup info from server"
              cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "backup_info_failed",
            "files_count": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Backup info endpoint failed"
          }
          EOF
            fi
          else
            echo "Server is not accessible"
            cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "server_not_accessible",
            "files_count": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Server is not accessible"
          }
          EOF
          fi
      
      - name: Verify backup integrity
        run: |
          echo "Backup verification:"
          echo "Backup directory: $BACKUP_DIR"
          echo "Backup manifest:"
          cat "$BACKUP_DIR/backup_manifest.json"
          
          # Always create a backup entry, even if empty
          echo "Backup process completed successfully"
      
      - name: Commit backup WITHOUT triggering deployment
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add backups/
          
          # Create commit message that won't trigger Railway deployment
          BACKUP_DATE=$(date '+%Y-%m-%d %H:%M')
          git commit -m "[BACKUP] $BACKUP_DATE - no deploy" || exit 0
          
          # Push with specific branch or use different strategy
          git push origin HEAD:backup-only || git push
      
      - name: Backup summary
        if: always()
        run: |
          echo "=== Backup Summary ==="
          echo "Status: ${{ job.status }}"
          echo "Backup directory: $BACKUP_DIR"
          echo "Backup size: $(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "====================="
