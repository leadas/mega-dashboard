name: Backup Encrypted Dashboard Data
on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:  # Manual trigger button

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create backup directory
        run: |
          BACKUP_DIR="backups/$(date +%Y-%m-%d_%H-%M-%S)"
          mkdir -p "$BACKUP_DIR"
          echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
      
      - name: Check server status and get backup info
        run: |
          echo "Checking server status and backup information..."
          
          # Get your Railway app URL (you'll need to set this as a secret)
          RAILWAY_URL="${{ secrets.RAILWAY_APP_URL }}"
          
          if [ -z "$RAILWAY_URL" ]; then
            echo "RAILWAY_APP_URL secret not set, using default pattern"
            # You can set this to your actual Railway app URL
            RAILWAY_URL="https://your-app-name.railway.app"
          fi
          
          echo "Railway URL: $RAILWAY_URL"
          
          # Check if server is running
          if curl -s -f "$RAILWAY_URL/health" > /dev/null; then
            echo "Server is running and accessible"
            
            # Get backup information (this endpoint doesn't require authentication for basic info)
            echo "Getting backup information..."
            curl -s "$RAILWAY_URL/api/backup-info" > backup_info.json || echo "Could not get backup info"
            
            if [ -f backup_info.json ]; then
              echo "Backup info received:"
              cat backup_info.json
              
              # Parse backup info to see if there are encrypted files
              HAS_DATA=$(cat backup_info.json | grep -o '"has_data":[^,]*' | cut -d: -f2 | tr -d ' ')
              FILES_COUNT=$(cat backup_info.json | grep -o '"files_count":[^,]*' | cut -d: -f2 | tr -d ' ')
              
              echo "Has data: $HAS_DATA"
              echo "Files count: $FILES_COUNT"
              
              if [ "$HAS_DATA" = "true" ] && [ "$FILES_COUNT" -gt 0 ]; then
                echo "Encrypted files found on server"
                
                # Create backup manifest
                cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "server_accessible_encrypted_files_found",
            "files_count": "$FILES_COUNT",
            "total_size_bytes": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Server accessible and encrypted files detected - backup verification successful"
          }
          EOF
              else
                echo "No encrypted files found on server"
                
                # Create backup manifest
                cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "server_accessible_no_encrypted_files",
            "files_count": 0,
            "total_size_bytes": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Server accessible but no encrypted files found - dashboard may be empty"
          }
          EOF
              fi
            else
              echo "Could not get backup info from server"
              # Create backup manifest
              cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "server_accessible_backup_info_failed",
            "files_count": 0,
            "total_size_bytes": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Server accessible but backup info endpoint failed"
          }
          EOF
            fi
          else
            echo "Server is not accessible or not running"
            # Create backup manifest
            cat > "$BACKUP_DIR/backup_manifest.json" << 'EOF'
          {
            "backup_date": "$(date -Iseconds)",
            "backup_type": "server_not_accessible",
            "files_count": 0,
            "total_size_bytes": 0,
            "railway_project": "${{ secrets.RAILWAY_PROJECT_ID }}",
            "github_run_id": "${{ github.run_id }}",
            "message": "Server is not accessible - may be down or URL incorrect"
          }
          EOF
          fi
      
      - name: Verify backup integrity
        run: |
          echo "Backup verification:"
          echo "Backup directory: $BACKUP_DIR"
          echo "Backup manifest:"
          cat "$BACKUP_DIR/backup_manifest.json"
          
          # Always create a backup entry, even if empty
          echo "Backup process completed successfully"
      
      - name: Commit and push backup
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add backups/
          
          # Create commit message
          BACKUP_DATE=$(date '+%Y-%m-%d %H:%M')
          git commit -m "Backup status check: $BACKUP_DATE" || exit 0
          git push
      
      - name: Cleanup old backups
        run: |
          # Keep only last 30 days of backups (delete directories older than 30 days)
          echo "Cleaning up old backups..."
          find backups/ -type d -name "20*" -mtime +30 -exec rm -rf {} + 2>/dev/null || true
          
          # Commit cleanup if any files were removed
          git add backups/
          if ! git diff --staged --quiet; then
            git commit -m "Cleanup old backups (keep last 30 days)" || exit 0
            git push
          fi
      
      - name: Backup summary
        if: always()
        run: |
          echo "=== Backup Summary ==="
          echo "Status: ${{ job.status }}"
          echo "Backup directory: $BACKUP_DIR"
          echo "Backup size: $(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1 || echo 'N/A')"
          echo "Repository size: $(du -sh . | cut -f1)"
          echo "====================="
